[[{"l":"The Green Alliance"},{"l":"Who We Are","p":["We are the vision subteam from FRC team 3656, the Dexter Dreadbots. Over time, new members will replace our old writers, and we plan on keeping this wiki up to date for as long as we still exist. We are always open to pull requests on our github in case you would like to add an article. More information on contributing can be found there."]},{"l":"Our Mission","p":["Our mission is to provide beginner-friendly, easy-to-implement documentation and articles to help you implement hand written vision into your FIRST team's robot."]},{"l":"What You Need","p":["To get started, we reccomend a webcam (anything around 720p or above will do), and a computer with python 3, pip, and an IDE of your choice to write it in. We recommend using VSCode if you are a beginner; it has a great plugin for python and a large community around it."]}],[{"l":"Maths","p":["Without maths, computer vision wouldn't exist. Though it may not be used to directly process the images, it forms the heart of the processing pipeline. It comes in many shapes and sizes, depending on the use case and efficiency of the operations; for instance, trigonometry is useful for mid-level processes, but basic geometry is sufficient for a lot of use cases (described briefly in Introduction to Pinholes). Eventually, we'll have articles on everything from simple geometry to linear algebra, but for now we'll start with beginning trigonometry."]}],[{"l":"Trigonometry","p":["Having a basic understanding of trigonometry is essential to understanding how to take data from an image and projecting it back into the real world. Trigonometry is the mathematics behind triangles, and mostly it gives us a few operations we can use on angles or side lengths to solve for the exact dimensions of a triangle."]},{"l":"SOH CAH TOA","p":["The three basic trig functions are \\sin, \\cos, and \\tan. Given the triangle:","We can define these functions as:","There are also inverse functions for these, so that you can determine the angle from the side lengths. These can be written in one of two ways: putting\\text{arc} in front, or by putting a ^{-1} right after the function, such as:","So as not to get \\sin^{-1} x confused with (\\sin x)^{-1}, there are another 3 functions that represent the reciprocals of the first three:","all of which can also be inverted by the same methods as above."]}],[{"l":"Cameras","p":["Cameras are the foundation of computer vision; without them, we wouldn't have images to process in the first place. Needless to say, at least a basic understanding is essential for working with vision code; thankfully, they're not as complicated as it seems."]},{"l":"Establishing the Type","p":["There are a couple of types of cameras, the main two that we'll focus on are fisheyes and pinholes. Generally, if you're thinking of a camera, it's a pinhole. Fisheyes are a lot more complicated, and involve a heap of extra work before they can be processed with computer vision. For most computer vision purposes, especially in FRC robotics, pinhole cameras will be sufficient, and so that's what our articles will go in depth on."]}],[{"l":"Introduction to Pinholes","p":["Pinhole cameras let light converge into a tiny hole (a pinhole!) and then diverge on the other side onto an image plane. In old cameras, this plane was the film. In digital cameras, it's a little more complicated, but the premise remains the same. This allows us to create this lovely diagram that forms the core of our vision systems:"]},{"l":"Interpreting the Triangles","p":["Ok, so what the heck does that mean? This is a vertical side-view of a camera, where the intersection of the two dashed lines is the pinhole of the camera. The section of the horizontal dashed line on the camera's side (labelled as f) is the distance between the pinhole and the image plane.","The pinhole of the camera, where light converges, is known as a focal point, and the distance between it and the image plane is known as the focal length!","The image plane's height is marked as py, indicating p ixel y-axis length, and it represents a single column of pixels in the captured images.","This diagram doesn't have to be a vertical side-view, though; we can simply rename the py line to px and it is now a horizontal side-view, where the px line represents a single row of pixels in the captured image.","Don't get confused â€” we can't actually just say that py is the same as px; it's just a simple way to show that the camera's horizontal side-view shares proportionality with it's vertical side-view. When we put actual math into it, you'll have to consider the py and px sides separately."]},{"l":"Applications of the Triangles","p":["These triangles allow us to approximate the location of a target, provided that we can detect it with computer vision, and that we have some knowns about it. Let's draw in a few more things on the diagram:","That was a lot. Let's take it down part by part: the point labelled target is whatever we're targeting, possibly a piece of retroreflective tape on the wall? target (in image) indicates the position of the pixel that shows the target in the camera. You'll notice that it's upside down on the diagram; this is a side-effect of the pinhole structure.","The image gets flipped right-side up before it ever passes through to the code. However, drawing it like this makes it more intuitive to look at. Just remember that the py line is upside down!","Next, the segment marked h is the height of the target, relative to the camera's height (the distance vertically from the camera to the target). The segment marked d is the distance of the target from the camera laterally. The segment marked ph is the distance, in pixels, from the centre of the image to the pixel that the target appears on in the image.","So how do we use this diagram? Well, we can use the principle of similar triangles to solve for various unknowns: the triangle on the inside of the camera is proportional to that outside the camera. Here's what that looks like in an equation:","Since p_h and f are known ( p_h because it's in the image and f because it's constant and intrinsic to the camera), we can solve for either d or h as long as we know the other one. For a real-world application, if we know that the retroreflective tape is 8 feet off the ground, we can solve for how far away it is from the camera. For example's sake, let's say that it's pixel height is 200 px, and the camera's focal length is 678 px. We can solve for d by cross-multiplying:","It's as easy as that! No complicated trigonometry or linear algebra. Things get quite a bit harder when you don't know either distance or height, or if your target is more complex than a simple piece of retro tape or apriltag that can be represented by a single point."]}]]